// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240721114456_vatpostingsetup")]
    partial class vatpostingsetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Api.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Api.Models.ApiHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ExternalDocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ApiHeaders");
                });

            modelBuilder.Entity("Api.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("CustomerPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("GenBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("PhoneNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("TIN")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("VATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("Id");

                    b.HasIndex("CustomerPostingGroupId");

                    b.HasIndex("VATBusPostingGroupId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Api.Models.CustomerLedgerEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("AmountToApply")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<bool>("Apiitive")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("AppliesToDocNo")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("AppliesToDocType")
                        .HasColumnType("int");

                    b.Property<string>("AppliesToExtDocNo")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("AppliesToId")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("ApplyingEntry")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("BalAccountNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("BalAccountType")
                        .HasColumnType("int");

                    b.Property<int>("ClosedByEntryNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("CustomerNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("CustomerPostingGroupCode")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("EntryNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ExternalDocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("JournalBatchName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<bool>("Open")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly>("PostingDate")
                        .HasColumnType("date");

                    b.Property<bool>("Prepayment")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<bool>("Reversed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.ToTable("CustomerLedgerEntries");
                });

            modelBuilder.Entity("Api.Models.CustomerPostingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("ReceivablesAccountNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("Id");

                    b.HasIndex("ReceivablesAccountNo");

                    b.ToTable("CustomerPostingGroups");
                });

            modelBuilder.Entity("Api.Models.GLAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountCategory")
                        .HasColumnType("int");

                    b.Property<int?>("AccountType")
                        .HasColumnType("int");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<int>("DebitOrCredit")
                        .HasColumnType("int");

                    b.Property<bool>("DirectPosting")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<int>("GenBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("GenPostingType")
                        .HasColumnType("int");

                    b.Property<int>("GenProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("IncomeOrBalance")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("No")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("VATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("Id");

                    b.ToTable("GLAccounts");
                });

            modelBuilder.Entity("Api.Models.GLEntry", b =>
                {
                    b.Property<int>("EntryNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalAccountNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalAccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("CreditAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("DebitAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ExternalDocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("GLAccountNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("GenBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("GenPostingType")
                        .HasColumnType("int");

                    b.Property<int>("GenProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("JournalBatchName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly>("PostingDate")
                        .HasColumnType("date");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<bool>("Reversed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<decimal>("VATAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("EntryNo");

                    b.HasIndex("GLAccountNo");

                    b.ToTable("GLEntries");
                });

            modelBuilder.Entity("Api.Models.GenJournalLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("AccountType")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("AmountLCY")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("AppliesToDocNo")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("AppliesToDocType")
                        .HasColumnType("int");

                    b.Property<decimal>("AppliesToId")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalAccountNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalAccountType")
                        .HasColumnType("int");

                    b.Property<int>("BalGenBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalGenPostingType")
                        .HasColumnType("int");

                    b.Property<int>("BalGenProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("BalVATAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("BalVATBaseAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("BalVATBaseAmountLCY")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalVATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("BalVATPercentage")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("BalVATProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("BalanceLCY")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("CreditAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<decimal>("CurrencyFactor")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("DebitAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("Description")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly?>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date");

                    b.Property<string>("ExternalDocumentNo")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("GenBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("GenPostingType")
                        .HasColumnType("int");

                    b.Property<int>("GenProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("JournalBatchName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("JournalTemplateName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("LineNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<DateOnly>("PostingDate")
                        .HasColumnType("date");

                    b.Property<int>("PostingNoSeries")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<bool>("Prepayment")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<decimal>("Quantity")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("VATAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("VATBaseAmount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("VATBaseAmountLCY")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("VATPercentage")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("Id");

                    b.HasIndex("AccountNo");

                    b.HasIndex("BalVATBusPostingGroupId");

                    b.HasIndex("BalVATProdPostingGroupId");

                    b.HasIndex("VATBusPostingGroupId");

                    b.HasIndex("VATProdPostingGroupId");

                    b.ToTable("GenJournalLines");
                });

            modelBuilder.Entity("Api.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Api.Models.NoSeries", b =>
                {
                    b.Property<string>("No")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("LastUsedNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("StartNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("No");

                    b.ToTable("NoSeries");
                });

            modelBuilder.Entity("Api.Models.VATBusinessPostingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.ToTable("VATBusinessPostingGroups");
                });

            modelBuilder.Entity("Api.Models.VATEntry", b =>
                {
                    b.Property<int>("EntryNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("Base")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<bool>("Closed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<int>("ClosedByEntryNo")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<DateOnly>("DocumentDate")
                        .HasColumnType("date");

                    b.Property<string>("DocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("DocumentType")
                        .HasColumnType("int");

                    b.Property<string>("ExternalDocumentNo")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("GenBusPostringGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("GenProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<DateOnly>("PostingDate")
                        .HasColumnType("date");

                    b.Property<bool>("Reversed")
                        .HasColumnType("tinyint(1)")
                        .HasAnnotation("DefaultValue", false);

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<decimal>("VATBaseDiscountPercentage")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATBusPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATProdPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("EntryNo");

                    b.HasIndex("VATBusPostingGroupId");

                    b.HasIndex("VATProdPostingGroupId");

                    b.ToTable("VATEntries");
                });

            modelBuilder.Entity("Api.Models.VATPostingSetup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<int>("SalesVATAccountId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATBusinessPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<decimal>("VATPercentage")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)")
                        .HasAnnotation("DefaultValue", 0);

                    b.Property<int>("VATProductPostingGroupId")
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    b.HasKey("Id");

                    b.HasIndex("SalesVATAccountId");

                    b.HasIndex("VATBusinessPostingGroupId");

                    b.HasIndex("VATProductPostingGroupId");

                    b.ToTable("VATPostingSetups");
                });

            modelBuilder.Entity("Api.Models.VATProductPostingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.ToTable("VATProductPostingGroups");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("DefaultValue", 0);

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("DefaultValue", "");

                    b.Property<string>("Value")
                        .HasColumnType("longtext")
                        .HasAnnotation("DefaultValue", "");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Api.Models.ApiHeader", b =>
                {
                    b.HasOne("Api.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Api.Models.Customer", b =>
                {
                    b.HasOne("Api.Models.CustomerPostingGroup", "CustomerPostingGroup")
                        .WithMany()
                        .HasForeignKey("CustomerPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATBusinessPostingGroup", "VATBusinessPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATBusPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerPostingGroup");

                    b.Navigation("VATBusinessPostingGroup");
                });

            modelBuilder.Entity("Api.Models.CustomerPostingGroup", b =>
                {
                    b.HasOne("Api.Models.GLAccount", "ReceivablesGLAccount")
                        .WithMany()
                        .HasForeignKey("ReceivablesAccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReceivablesGLAccount");
                });

            modelBuilder.Entity("Api.Models.GLEntry", b =>
                {
                    b.HasOne("Api.Models.GLAccount", "GLAccount")
                        .WithMany()
                        .HasForeignKey("GLAccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GLAccount");
                });

            modelBuilder.Entity("Api.Models.GenJournalLine", b =>
                {
                    b.HasOne("Api.Models.GLAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATBusinessPostingGroup", "BalVATBusinessPostingGroup")
                        .WithMany()
                        .HasForeignKey("BalVATBusPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATProductPostingGroup", "BalVATProductPostingGroup")
                        .WithMany()
                        .HasForeignKey("BalVATProdPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATBusinessPostingGroup", "VATBusinessPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATBusPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATProductPostingGroup", "VATProductPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATProdPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("BalVATBusinessPostingGroup");

                    b.Navigation("BalVATProductPostingGroup");

                    b.Navigation("VATBusinessPostingGroup");

                    b.Navigation("VATProductPostingGroup");
                });

            modelBuilder.Entity("Api.Models.VATEntry", b =>
                {
                    b.HasOne("Api.Models.VATBusinessPostingGroup", "VATBusinessPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATBusPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATProductPostingGroup", "VATProductPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATProdPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VATBusinessPostingGroup");

                    b.Navigation("VATProductPostingGroup");
                });

            modelBuilder.Entity("Api.Models.VATPostingSetup", b =>
                {
                    b.HasOne("Api.Models.GLAccount", "SalesVATGLAccount")
                        .WithMany()
                        .HasForeignKey("SalesVATAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATBusinessPostingGroup", "VATBusinessPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATBusinessPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Models.VATProductPostingGroup", "VATProductPostingGroup")
                        .WithMany()
                        .HasForeignKey("VATProductPostingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesVATGLAccount");

                    b.Navigation("VATBusinessPostingGroup");

                    b.Navigation("VATProductPostingGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Api.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
